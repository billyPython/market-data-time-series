// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Tick {
    // message fields
    pub datetime: i64,
    pub bid: ::std::string::String,
    pub ask: ::std::string::String,
    pub last: ::std::string::String,
    pub volume: u64,
    pub datetime_msc: i64,
    pub flags: Tick_EnTickShortFlags,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Tick {
    pub fn new() -> Tick {
        ::std::default::Default::default()
    }

    // int64 datetime = 1;

    pub fn clear_datetime(&mut self) {
        self.datetime = 0;
    }

    // Param is passed by value, moved
    pub fn set_datetime(&mut self, v: i64) {
        self.datetime = v;
    }

    pub fn get_datetime(&self) -> i64 {
        self.datetime
    }

    // string bid = 2;

    pub fn clear_bid(&mut self) {
        self.bid.clear();
    }

    // Param is passed by value, moved
    pub fn set_bid(&mut self, v: ::std::string::String) {
        self.bid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bid(&mut self) -> &mut ::std::string::String {
        &mut self.bid
    }

    // Take field
    pub fn take_bid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bid, ::std::string::String::new())
    }

    pub fn get_bid(&self) -> &str {
        &self.bid
    }

    // string ask = 3;

    pub fn clear_ask(&mut self) {
        self.ask.clear();
    }

    // Param is passed by value, moved
    pub fn set_ask(&mut self, v: ::std::string::String) {
        self.ask = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ask(&mut self) -> &mut ::std::string::String {
        &mut self.ask
    }

    // Take field
    pub fn take_ask(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ask, ::std::string::String::new())
    }

    pub fn get_ask(&self) -> &str {
        &self.ask
    }

    // string last = 4;

    pub fn clear_last(&mut self) {
        self.last.clear();
    }

    // Param is passed by value, moved
    pub fn set_last(&mut self, v: ::std::string::String) {
        self.last = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last(&mut self) -> &mut ::std::string::String {
        &mut self.last
    }

    // Take field
    pub fn take_last(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.last, ::std::string::String::new())
    }

    pub fn get_last(&self) -> &str {
        &self.last
    }

    // uint64 volume = 5;

    pub fn clear_volume(&mut self) {
        self.volume = 0;
    }

    // Param is passed by value, moved
    pub fn set_volume(&mut self, v: u64) {
        self.volume = v;
    }

    pub fn get_volume(&self) -> u64 {
        self.volume
    }

    // int64 datetime_msc = 6;

    pub fn clear_datetime_msc(&mut self) {
        self.datetime_msc = 0;
    }

    // Param is passed by value, moved
    pub fn set_datetime_msc(&mut self, v: i64) {
        self.datetime_msc = v;
    }

    pub fn get_datetime_msc(&self) -> i64 {
        self.datetime_msc
    }

    // .mt5.Tick.EnTickShortFlags flags = 7;

    pub fn clear_flags(&mut self) {
        self.flags = Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: Tick_EnTickShortFlags) {
        self.flags = v;
    }

    pub fn get_flags(&self) -> Tick_EnTickShortFlags {
        self.flags
    }
}

impl ::protobuf::Message for Tick {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.datetime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ask)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.last)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.volume = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.datetime_msc = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.flags, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.datetime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.datetime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bid);
        }
        if !self.ask.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ask);
        }
        if !self.last.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.last);
        }
        if self.volume != 0 {
            my_size += ::protobuf::rt::value_size(5, self.volume, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.datetime_msc != 0 {
            my_size += ::protobuf::rt::value_size(6, self.datetime_msc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flags != Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE {
            my_size += ::protobuf::rt::enum_size(7, self.flags);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.datetime != 0 {
            os.write_int64(1, self.datetime)?;
        }
        if !self.bid.is_empty() {
            os.write_string(2, &self.bid)?;
        }
        if !self.ask.is_empty() {
            os.write_string(3, &self.ask)?;
        }
        if !self.last.is_empty() {
            os.write_string(4, &self.last)?;
        }
        if self.volume != 0 {
            os.write_uint64(5, self.volume)?;
        }
        if self.datetime_msc != 0 {
            os.write_int64(6, self.datetime_msc)?;
        }
        if self.flags != Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE {
            os.write_enum(7, self.flags.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tick {
        Tick::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "datetime",
                    |m: &Tick| { &m.datetime },
                    |m: &mut Tick| { &mut m.datetime },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bid",
                    |m: &Tick| { &m.bid },
                    |m: &mut Tick| { &mut m.bid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ask",
                    |m: &Tick| { &m.ask },
                    |m: &mut Tick| { &mut m.ask },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "last",
                    |m: &Tick| { &m.last },
                    |m: &mut Tick| { &mut m.last },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "volume",
                    |m: &Tick| { &m.volume },
                    |m: &mut Tick| { &mut m.volume },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "datetime_msc",
                    |m: &Tick| { &m.datetime_msc },
                    |m: &mut Tick| { &mut m.datetime_msc },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Tick_EnTickShortFlags>>(
                    "flags",
                    |m: &Tick| { &m.flags },
                    |m: &mut Tick| { &mut m.flags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Tick>(
                    "Tick",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Tick {
        static mut instance: ::protobuf::lazy::Lazy<Tick> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Tick,
        };
        unsafe {
            instance.get(Tick::new)
        }
    }
}

impl ::protobuf::Clear for Tick {
    fn clear(&mut self) {
        self.clear_datetime();
        self.clear_bid();
        self.clear_ask();
        self.clear_last();
        self.clear_volume();
        self.clear_datetime_msc();
        self.clear_flags();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tick {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Tick_EnTickShortFlags {
    TICK_SHORT_FLAG_NONE = 0,
    TICK_SHORT_FLAG_RAW = 1,
    TICK_SHORT_FLAG_BID = 2,
    TICK_SHORT_FLAG_ASK = 4,
    TICK_SHORT_FLAG_LAST = 8,
    TICK_SHORT_FLAG_VOLUME = 16,
    TICK_SHORT_FLAG_BUY = 32,
    TICK_SHORT_FLAG_SELL = 64,
}

impl ::protobuf::ProtobufEnum for Tick_EnTickShortFlags {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Tick_EnTickShortFlags> {
        match value {
            0 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE),
            1 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_RAW),
            2 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_BID),
            4 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_ASK),
            8 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_LAST),
            16 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_VOLUME),
            32 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_BUY),
            64 => ::std::option::Option::Some(Tick_EnTickShortFlags::TICK_SHORT_FLAG_SELL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Tick_EnTickShortFlags] = &[
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_RAW,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_BID,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_ASK,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_LAST,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_VOLUME,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_BUY,
            Tick_EnTickShortFlags::TICK_SHORT_FLAG_SELL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Tick_EnTickShortFlags", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Tick_EnTickShortFlags {
}

impl ::std::default::Default for Tick_EnTickShortFlags {
    fn default() -> Self {
        Tick_EnTickShortFlags::TICK_SHORT_FLAG_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Tick_EnTickShortFlags {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TickList {
    // message fields
    pub ticks: ::protobuf::RepeatedField<Tick>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TickList {
    pub fn new() -> TickList {
        ::std::default::Default::default()
    }

    // repeated .mt5.Tick ticks = 1;

    pub fn clear_ticks(&mut self) {
        self.ticks.clear();
    }

    // Param is passed by value, moved
    pub fn set_ticks(&mut self, v: ::protobuf::RepeatedField<Tick>) {
        self.ticks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ticks(&mut self) -> &mut ::protobuf::RepeatedField<Tick> {
        &mut self.ticks
    }

    // Take field
    pub fn take_ticks(&mut self) -> ::protobuf::RepeatedField<Tick> {
        ::std::mem::replace(&mut self.ticks, ::protobuf::RepeatedField::new())
    }

    pub fn get_ticks(&self) -> &[Tick] {
        &self.ticks
    }
}

impl ::protobuf::Message for TickList {
    fn is_initialized(&self) -> bool {
        for v in &self.ticks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ticks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ticks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ticks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TickList {
        TickList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tick>>(
                    "ticks",
                    |m: &TickList| { &m.ticks },
                    |m: &mut TickList| { &mut m.ticks },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TickList>(
                    "TickList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TickList {
        static mut instance: ::protobuf::lazy::Lazy<TickList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TickList,
        };
        unsafe {
            instance.get(TickList::new)
        }
    }
}

impl ::protobuf::Clear for TickList {
    fn clear(&mut self) {
        self.clear_ticks();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TickList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TickList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntick.proto\x12\x03mt5\"\xaa\x03\n\x04Tick\x12\x1a\n\x08datetime\x18\
    \x01\x20\x01(\x03R\x08datetime\x12\x10\n\x03bid\x18\x02\x20\x01(\tR\x03b\
    id\x12\x10\n\x03ask\x18\x03\x20\x01(\tR\x03ask\x12\x12\n\x04last\x18\x04\
    \x20\x01(\tR\x04last\x12\x16\n\x06volume\x18\x05\x20\x01(\x04R\x06volume\
    \x12!\n\x0cdatetime_msc\x18\x06\x20\x01(\x03R\x0bdatetimeMsc\x120\n\x05f\
    lags\x18\x07\x20\x01(\x0e2\x1a.mt5.Tick.EnTickShortFlagsR\x05flags\"\xe0\
    \x01\n\x10EnTickShortFlags\x12\x18\n\x14TICK_SHORT_FLAG_NONE\x10\0\x12\
    \x17\n\x13TICK_SHORT_FLAG_RAW\x10\x01\x12\x17\n\x13TICK_SHORT_FLAG_BID\
    \x10\x02\x12\x17\n\x13TICK_SHORT_FLAG_ASK\x10\x04\x12\x18\n\x14TICK_SHOR\
    T_FLAG_LAST\x10\x08\x12\x1a\n\x16TICK_SHORT_FLAG_VOLUME\x10\x10\x12\x17\
    \n\x13TICK_SHORT_FLAG_BUY\x10\x20\x12\x18\n\x14TICK_SHORT_FLAG_SELL\x10@\
    \"+\n\x08TickList\x12\x1f\n\x05ticks\x18\x01\x20\x03(\x0b2\t.mt5.TickR\
    \x05ticksJ\x8c\x0b\n\x06\x12\x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0b\n\n\n\x02\x04\0\x12\x04\x04\0\
    \x16\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0c\n\x0c\n\x04\x04\0\x04\0\
    \x12\x04\x05\x04\x0e\x05\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x05\t\x19\n\
    \x15\n\x06\x04\0\x04\0\x02\0\x12\x03\x06\x08$\"\x06\x20none\x20\n\x0e\n\
    \x07\x04\0\x04\0\x02\0\x01\x12\x03\x06\x08\x1c\n\x0e\n\x07\x04\0\x04\0\
    \x02\0\x02\x12\x03\x06\"#\n\x19\n\x06\x04\0\x04\0\x02\x01\x12\x03\x07\
    \x08$\"\n\x20raw\x20tick\x20\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\
    \x07\x08\x1b\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x07\"#\n-\n\x06\
    \x04\0\x04\0\x02\x02\x12\x03\x08\x08$\"\x1e\x20tick\x20changes\x20bid\
    \x20price\x20value\x20\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x08\
    \x08\x1b\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\x08\"#\n-\n\x06\x04\
    \0\x04\0\x02\x03\x12\x03\t\x08$\"\x1e\x20tick\x20changes\x20ask\x20price\
    \x20value\x20\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\t\x08\x1b\n\
    \x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03\t\"#\n.\n\x06\x04\0\x04\0\x02\
    \x04\x12\x03\n\x08$\"\x1f\x20tick\x20changes\x20last\x20price\x20value\
    \x20\n\x0e\n\x07\x04\0\x04\0\x02\x04\x01\x12\x03\n\x08\x1c\n\x0e\n\x07\
    \x04\0\x04\0\x02\x04\x02\x12\x03\n\"#\n*\n\x06\x04\0\x04\0\x02\x05\x12\
    \x03\x0b\x08%\"\x1b\x20tick\x20changes\x20volume\x20value\x20\n\x0e\n\
    \x07\x04\0\x04\0\x02\x05\x01\x12\x03\x0b\x08\x1e\n\x0e\n\x07\x04\0\x04\0\
    \x02\x05\x02\x12\x03\x0b\"$\n/\n\x06\x04\0\x04\0\x02\x06\x12\x03\x0c\x08\
    %\"\x20\x20tick\x20created\x20due\x20buy\x20operation\x20\n\x0e\n\x07\
    \x04\0\x04\0\x02\x06\x01\x12\x03\x0c\x08\x1b\n\x0e\n\x07\x04\0\x04\0\x02\
    \x06\x02\x12\x03\x0c\"$\n0\n\x06\x04\0\x04\0\x02\x07\x12\x03\r\x08%\"!\
    \x20tick\x20created\x20due\x20sell\x20operation\x20\n\x0e\n\x07\x04\0\
    \x04\0\x02\x07\x01\x12\x03\r\x08\x1c\n\x0e\n\x07\x04\0\x04\0\x02\x07\x02\
    \x12\x03\r\"$\n>\n\x04\x04\0\x02\0\x12\x03\x0f\x04\x19\"1\x20ast\x20upda\
    te\x20datetime\x20in\x20seconds\x20since\x2001/01/1970\x20\n\r\n\x05\x04\
    \0\x02\0\x04\x12\x04\x0f\x04\x0e\x05\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0f\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0c\x14\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0f\x17\x18\n\x18\n\x04\x04\0\x02\x01\x12\x03\
    \x10\x04\x14\"\x0b\x20bid\x20price\x20\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04\x10\x04\x0f\x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x10\x04\n\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x0c\x0f\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x10\x12\x13\n\x18\n\x04\x04\0\x02\x02\x12\x03\x11\x04\
    \x14\"\x0b\x20ask\x20price\x20\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x11\
    \x04\x10\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x11\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x11\x0c\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x11\x12\x13\n\x19\n\x04\x04\0\x02\x03\x12\x03\x12\x04\x15\"\x0c\x20\
    last\x20price\x20\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x12\x04\x11\x14\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x12\x0c\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12\x13\
    \x14\n\x20\n\x04\x04\0\x02\x04\x12\x03\x13\x04\x17\"\x13\x20last\x20trad\
    e\x20volume\x20\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x13\x04\x12\x15\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\x13\x0c\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x13\x15\
    \x16\n8\n\x04\x04\0\x02\x05\x12\x03\x14\x04\x1d\"+\x20datetime\x20in\x20\
    milliseconds\x20since\x2001/01/1970\x20\n\r\n\x05\x04\0\x02\x05\x04\x12\
    \x04\x14\x04\x13\x17\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x14\x04\t\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x14\x0c\x18\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x14\x1b\x1c\n\x14\n\x04\x04\0\x02\x06\x12\x03\x15\x04\
    \x1f\"\x07\x20flags\x20\n\r\n\x05\x04\0\x02\x06\x04\x12\x04\x15\x04\x14\
    \x1d\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x15\x04\x14\n\x0c\n\x05\x04\0\
    \x02\x06\x01\x12\x03\x15\x15\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\
    \x15\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x18\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x19\x04\x1c\n\
    \x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x19\x04\x0c\n\x0c\n\x05\x04\x01\x02\
    \0\x06\x12\x03\x19\r\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x19\x12\
    \x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x19\x1a\x1bb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
